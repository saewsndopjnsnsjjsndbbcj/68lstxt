import fetch from "node-fetch";
import express from "express";

const app = express();
const dbUrl = "https://gb-8e4c1-default-rtdb.firebaseio.com"; // Firebase c·ªßa b·∫°n
const PORT = process.env.PORT || 10000;

let lastPhien = null;

// üß† L·∫•y d·ªØ li·ªáu t·ª´ Firebase
async function getCurrentSession() {
  try {
    const res = await fetch(`${dbUrl}/taixiu_sessions/current.json`);
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const data = await res.json();
    if (!data || !data.Phien) return;

    // N·∫øu l√† phi√™n m·ªõi ‚Üí c·∫≠p nh·∫≠t
    if (data.Phien !== lastPhien) {
      lastPhien = data.Phien;

      console.clear();
      console.log(`
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìå Phi√™n:     ${data.Phien}
üé≤ X√∫c x·∫Øc 1: ${data.xuc_xac_1}
üé≤ X√∫c x·∫Øc 2: ${data.xuc_xac_2}
üé≤ X√∫c x·∫Øc 3: ${data.xuc_xac_3}
‚ûï T·ªïng:      ${data.tong}
‚úÖ K·∫øt qu·∫£:   ${data.ket_qua}
‚è∞ Th·ªùi gian: ${data.thoi_gian}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
      `);

      // Ghi l·ªãch s·ª≠
      const save = await fetch(`${dbUrl}/taixiu_sessions/history/${data.Phien}.json`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      if (save.ok) console.log(`‚úÖ ƒê√£ l∆∞u phi√™n ${data.Phien} v√†o /history`);
      else console.error(`‚ùå L·ªói l∆∞u l·ªãch s·ª≠: ${save.status}`);
    }
  } catch (err) {
    console.error("‚ùå L·ªói ƒë·ªçc Firebase:", err.message);
  }
}

// üîÅ C·∫≠p nh·∫≠t m·ªói 5 gi√¢y
setInterval(getCurrentSession, 5000);

// üìÇ API hi·ªÉn th·ªã l·ªãch s·ª≠
app.get("/history", async (req, res) => {
  try {
    const resp = await fetch(`${dbUrl}/taixiu_sessions/history.json`);
    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
    const history = await resp.json();

    if (!history) return res.send("<h2>‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠.</h2>");

    let html = `
      <html lang="vi">
      <head>
        <meta charset="utf-8"/>
        <title>L·ªãch s·ª≠ T√†i X·ªâu</title>
        <style>
          body { font-family: Arial, sans-serif; background: #111; color: #fff; padding: 20px; }
          h1 { color: #00ff99; }
          table { border-collapse: collapse; width: 100%; margin-top: 10px; }
          th, td { border: 1px solid #444; padding: 8px; text-align: center; }
          th { background: #222; color: #0f0; }
          tr:nth-child(even) { background: #1a1a1a; }
        </style>
      </head>
      <body>
        <h1>üìú L·ªãch s·ª≠ T√†i X·ªâu</h1>
        <table>
          <tr>
            <th>Phi√™n</th>
            <th>X√∫c x·∫Øc 1</th>
            <th>X√∫c x·∫Øc 2</th>
            <th>X√∫c x·∫Øc 3</th>
            <th>T·ªïng</th>
            <th>K·∫øt qu·∫£</th>
            <th>Th·ªùi gian</th>
          </tr>
    `;

    const sortedKeys = Object.keys(history).sort((a, b) => b - a); // Phi√™n m·ªõi nh·∫•t l√™n ƒë·∫ßu
    for (const key of sortedKeys) {
      const item = history[key];
      html += `
        <tr>
          <td>${item.Phien}</td>
          <td>${item.xuc_xac_1}</td>
          <td>${item.xuc_xac_2}</td>
          <td>${item.xuc_xac_3}</td>
          <td>${item.tong}</td>
          <td>${item.ket_qua}</td>
          <td>${item.thoi_gian}</td>
        </tr>
      `;
    }

    html += `
        </table>
      </body>
      </html>
    `;

    res.send(html);
  } catch (err) {
    res.status(500).send(`<h3>‚ùå L·ªói t·∫£i l·ªãch s·ª≠: ${err.message}</h3>`);
  }
});

// üî• Route m·∫∑c ƒë·ªãnh
app.get("/", (req, res) => {
  res.send("üî• ƒêang theo d√µi Firebase v√† l∆∞u l·ªãch s·ª≠ phi√™n. Truy c·∫≠p /history ƒë·ªÉ xem l·ªãch s·ª≠.");
});

// üöÄ Kh·ªüi ƒë·ªông server
app.listen(PORT, () => {
  console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i c·ªïng ${PORT}`);
});
